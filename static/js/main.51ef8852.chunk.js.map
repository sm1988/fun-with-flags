{"version":3,"sources":["CountryCard.js","Wrapper.js","Navbar.js","MainContent.js","App.js","serviceWorker.js","index.js"],"names":["CountryCard","props","className","onClick","handleClick","id","class","alt","name","src","image","capital","Wrapper","children","Navbar","currentScore","highScore","MainContent","App","state","countries","Clicked","shuffleArray","handleScore","console","log","timesClicked","forEach","element","clicked","setState","handleIncrement","alert","shuffledArr","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","this","map","country","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.51ef8852.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction CountryCard(props) {\n    return (\n            <div className=\"col col-md-3\">\n                <div className=\"card\" onClick={() => props.handleClick(props.id)} >\n                    <img class=\"card-img-top\" alt={props.name} src={props.image} />\n                    <div className=\"card-body\">\n                        <h5 class=\"card-title\">Country: {props.name}</h5>\n                        <h6 class=\"card-title\">Capital: {props.capital}</h6>\n                    </div>\n                </div >\n            </div>\n    )\n}\n\nexport default CountryCard;","import React from \"react\";\n\nfunction Wrapper(props){\n    return <div className=\"container\">{props.children}</div>\n}\n\nexport default Wrapper;","import React from \"react\";\n\nfunction Navbar(props) {\n    return (\n        <header className=\"container fixed-top header-top\">\n            <div className=\"row h1-top\">\n\n                <div className=\"col-md-6 title\">\n                    <h1 >Fun With Flags</h1>\n                    <p>Get points by clicking on a flag but don't click on any more than once!</p>\n                    <p>If you get top score of 12, we will surprise you!</p>\n                </div>\n                <div className=\"header-img col-md-2\"></div>\n                <nav className=\"col-md-4 title\" >\n                    <p>Score: <span>{props.currentScore}</span></p>\n                    <p>Top Score: <span>{props.highScore}</span> </p>\n                    {props.children}\n                </nav>\n            </div>\n        </header>\n    )\n}\n\nexport default Navbar;","import React from \"react\";\n\nfunction MainContent(props) {\n  return (\n    <div className=\"row content\">{props.children}\n    \n    </div>\n\n  )\n}\n\nexport default MainContent;","import React, { Component } from \"react\";\nimport CountryCard from \"./CountryCard\";\nimport Wrapper from \"./Wrapper\";\nimport Navbar from \"./Navbar\";\nimport MainContent from \"./MainContent\"\nimport countries from \"./countries.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    countries,\n    highScore: 0,\n    currentScore: 0,\n    Clicked: false\n  };\n\n  handleClick = id => {\n    this.shuffleArray();\n    this.handleScore(id);\n    console.log(this.state.timesClicked);\n  };\n\n  handleScore = id => {\n    this.state.countries.forEach(element => {\n      if (id === element.id && element.clicked === false) {\n        element.clicked = true;\n        this.setState({ Clicked: false });\n        this.handleIncrement();\n      } else if (id === element.id && element.clicked === true) {\n        if (this.state.currentScore > this.state.highScore && 12) {\n          this.setState({ highScore: this.state.currentScore });\n          alert(\"Sheldon says : BAZZZZINGAAAA!!!!\");\n        }\n        this.setState({ currentScore: 0 });\n        this.setState({ Clicked: true });\n        this.state.countries.forEach(element => (element.clicked = false));\n        console.log(this.state.countries);\n      }\n    });\n  };\n\n  shuffleArray = () => {\n    // Shuffle array of objects\n    const shuffledArr = this.shuffle(this.state.countries);\n    // Setting 'shuffledArr' as the new state\n    this.setState({ shuffledArr });\n  };\n\n  // handleIncrement increments this.state.currentScore by 1\n  handleIncrement = () => {\n    // Using setState method to update component's state\n    this.setState({ currentScore: this.state.currentScore + 1 });\n  };\n\n  // Function that takes an array as a parameter and shuffles it\n  shuffle = array => {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar\n          currentScore={this.state.currentScore}\n          highScore={this.state.highScore}\n        />\n        <MainContent>\n        {this.state.countries.map(country => (\n          <CountryCard\n            Clicked={this.state.Clicked}\n            handleClick={this.handleClick}\n            id={country.id}\n            key={country.id}\n            name={country.name}\n            image={country.image}\n            capital={country.capital}\n          />\n        ))}\n        </MainContent>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}